---
interface Props {
  title: string; summary: string; benefits: string[]; deliverables?: string[]; badge?: string;
  cta?: { label: string; href: string };
}
const { title, summary, benefits, deliverables = [], badge, cta } = Astro.props as Props;
---

<article class="bg-surface/80 border border-white/10 rounded-xl p-6 hover:border-white/20 transition-colors">
  {badge && <span class="inline-block text-xs px-2 py-1 rounded bg-white/5 border border-white/10 mb-3">{badge}</span>}
  <h3 class="text-xl font-semibold">{title}</h3>
  <p class="text-text-muted mt-2">{summary}</p>
  <ul class="mt-4 space-y-2">
    {benefits.map(b => <li class="flex gap-2 items-start"><span aria-hidden="true" class="mt-1 w-2 h-2 rounded-full bg-[color:var(--accent)]"></span><span>{b}</span></li>)}
  </ul>
  {deliverables.length>0 && (
    <div class="mt-4">
      <p class="text-sm text-text-muted mb-1">Inclus :</p>
      <ul class="text-sm list-disc ml-5 space-y-1">
        {deliverables.map(d => <li>{d}</li>)}
      </ul>
    </div>
  )}
  {cta && <a href={cta.href} class="mt-6 inline-block rounded-lg px-4 py-2 border border-white/10 hover:bg-white/5">{cta.label}</a>}
</article>
